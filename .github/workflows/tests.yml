name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.detignore'
      - '**.example'
      - '**.json'
      - '**.md'
      - '**.png'
      - '**.sample'
      - '**.TAG'
      - '**.yaml'
      - '**.yml'
      - 'docs/**'
      - 'scripts/**'
      - 'LICENSE'
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - 'changelog/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.detignore'
      - '**.example'
      - '**.json'
      - '**.md'
      - '**.png'
      - '**.sample'
      - '**.TAG'
      - '**.yaml'
      - '**.yml'
      - 'docs/**'
      - 'scripts/**'
      - 'LICENSE'
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - 'changelog/**'

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: eval_framework_public
  HF_DATASET_CACHE_DIR: /tmp/huggingface_datasets  # <- single source of truth

jobs:

  lint:
    runs-on: ubuntu-latest # default runner runs out of disk space due to hf cache
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
        with:
          github-repo-token: ${{ secrets.TOKEN_AA_GITHUB_REPO_READER }}
      - name: Run Pre-Commit
        run: |
          poetry run pre-commit install
          poetry run pre-commit run -a
      - name: Run MyPy
        run: |
          poetry run mypy src tests utils

  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      poetry_changed: ${{ steps.detect.outputs.poetry_changed }}
    steps:
      - name: Checkout PR head (or commit on push)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Fetch base ref (only needed for PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}

      - name: Detect changes in poetry files
        id: detect
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              BASE_SHA=$(git rev-parse HEAD^)
            else
              BASE_SHA=$(git hash-object -t tree /dev/null)
            fi
            HEAD_SHA="${{ github.sha }}"
          fi

          echo "Comparing $BASE_SHA...$HEAD_SHA"
          if git diff --name-only "$BASE_SHA...$HEAD_SHA" | grep -E '^(pyproject\.toml|poetry\.lock)$' >/dev/null; then
            echo "poetry_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "poetry_changed=false" >> "$GITHUB_OUTPUT"
          fi

  hf-datasets-cache:
    runs-on: cpu-runner-8c-32gb-01  # default runner runs out of disk space, unfortunately
    container: derskythe/github-runner-base:ubuntu-noble  # has the right python, sudo and curl:)
    steps:
      - uses: actions/checkout@v4
        if: github.ref == 'refs/heads/main'
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
        if: github.ref == 'refs/heads/main'
        with:
          github-repo-token: ${{ secrets.TOKEN_AA_GITHUB_REPO_READER }}
      - name: Huggingface datasets cache
        uses: actions/cache@v4
        if: github.ref == 'refs/heads/main'
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}        # <- use shared env
          key: hf-datasets-${{ github.run_id }}
          restore-keys: |
            hf-datasets-
      - name: Download datasets
        if: github.ref == 'refs/heads/main'
        run: |
          export HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }}
          export PATH=$HOME/.local/bin:$PATH
          poetry run python -c "from eval_framework.task_names import make_sure_all_hf_datasets_are_in_cache; make_sure_all_hf_datasets_are_in_cache()"

  build:
    needs: [lint, changes]
    if: ${{ needs.changes.outputs.poetry_changed == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: cpu-runner-8c-32gb-01
    container: docker:dind
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: eval_framework_public
      REPO_OWNER_LC: aleph-alpha-research
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Registry Authentication
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest

  test-cpu:
    runs-on: cpu-runner-8c-32gb-01
    container: derskythe/github-runner-base:ubuntu-noble
    needs: [lint, hf-datasets-cache]
    steps:
      - uses: actions/checkout@v4
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}        # <- shared path
          key: hf-datasets-
      - name: Run tests
        run: |
          export HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }}
          export HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }}
          export PATH=$HOME/.local/bin:$PATH
          poetry run pytest --durations=30 -v -m "not gpu and not cpu_slow and not external_api"

  test-cpu-slow:
    runs-on: cpu-runner-8c-32gb-01
    container: derskythe/github-runner-base:ubuntu-noble
    needs: [lint, hf-datasets-cache]
    steps:
      - uses: actions/checkout@v4
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}        # <- shared path
          key: hf-datasets-
      - name: Run tests
        run: |
          export HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }}
          export HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }}
          export PATH=$HOME/.local/bin:$PATH
          poetry run python -c "import nltk; nltk.download('punkt_tab')"  # otherwise there's a race condition in ntltk
          poetry run pytest -n auto --max-worker-restart=0 --durations=30 -v -m "not gpu and cpu_slow and not external_api"

  test-gpu:
    runs-on: EvalFrameworkGPURunner
    needs: [build, test-cpu, test-cpu-slow]
    if: ${{ always()
          && needs.test-cpu.result == 'success'
          && needs.test-cpu-slow.result == 'success'
          && (needs.build.result == 'success' || needs.build.result == 'skipped') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Normalize repo owner to lowercase
        run: |
          echo "REPO_OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}        # <- shared path
          key: hf-datasets-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull container image
        run: |
          docker pull "${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest"

      - name: Run GPU tests inside container with GPU access
        run: |
          timeout 20m docker run --rm --gpus all \
            -v ${{ github.workspace }}:/eval_framework \
            -w /eval_framework \
            -e HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }} \
            -e HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }} \
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest \
            bash -c 'poetry run pytest --durations=30 -v -m "gpu and not cpu_slow and not external_api and not vllm"'

  test-gpu-vllm:
    runs-on: EvalFrameworkGPURunner
    needs: [build, test-cpu, test-cpu-slow, test-gpu]
    if: ${{ always()
          && needs.test-cpu.result == 'success'
          && needs.test-cpu-slow.result == 'success'
          && (needs.build.result == 'success' || needs.build.result == 'skipped')
          && (needs.test-gpu.result == 'success' || needs.test-gpu.result == 'skipped') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Normalize repo owner to lowercase
        run: |
          echo "REPO_OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}        # <- shared path
          key: hf-datasets-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull container image
        run: |
          docker pull "${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest"

      - name: Run GPU tests inside container with GPU access
        run: |
          timeout 20m docker run --rm --gpus all \
            -v ${{ github.workspace }}:/eval_framework \
            -w /eval_framework \
            -e HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }} \
            -e HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }} \
            -e VLLM_LOGGING_LEVEL=DEBUG \
            -e VLLM_WORKER_MULTIPROC_METHOD=spawn \
            -e VLLM_USE_MODELSCOPE=False \
            -e VLLM_NCCL_SO_PATH="" \
            -e VLLM_USE_TRITON_FLASH_ATTN=0 \
            -e VLLM_DISABLE_CUSTOM_ALL_REDUCE=1 \
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest \
            bash -c 'curl -sSL https://install.python-poetry.org | python3 - && export PATH="$HOME/.local/bin:$PATH" && poetry --version && poetry run pytest --log-cli-level=INFO -v -m "vllm"'
