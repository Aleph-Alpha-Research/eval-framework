name: CI

on:
  push:
    branches: [main, ci/split-workflows]  # TEMPORARY: Remove ci/split-workflows before merging
    paths-ignore:
      - '*.detignore'
      - '**/*.detignore'
      - '*.example'
      - '**/*.example'
      - '*.json'
      - '**/*.json'
      - '*.md'
      - '**/*.md'
      - '*.png'
      - '**/*.png'
      - '*.sample'
      - '**/*.sample'
      - '*.TAG'
      - '**/*.TAG'
      - '*.yaml'
      - '**/*.yaml'
      - '*.yml'
      - '**/*.yml'
      - '!/.github/workflows/**'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'changelog/**'
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches: [main, ci/split-workflows]  # TEMPORARY: Remove ci/split-workflows before merging
    paths-ignore:
      - '*.detignore'
      - '**/*.detignore'
      - '*.example'
      - '**/*.example'
      - '*.json'
      - '**/*.json'
      - '*.md'
      - '**/*.md'
      - '*.png'
      - '**/*.png'
      - '*.sample'
      - '**/*.sample'
      - '*.TAG'
      - '**/*.TAG'
      - '*.yaml'
      - '**/*.yaml'
      - '*.yml'
      - '**/*.yml'
      - '!/.github/workflows/**'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'changelog/**'
  pull_request_target:
    types: [opened, reopened, synchronize, labeled]
    branches: [main, ci/split-workflows]  # TEMPORARY: Remove ci/split-workflows before merging
    paths-ignore:
      - '*.detignore'
      - '**/*.detignore'
      - '*.example'
      - '**/*.example'
      - '*.json'
      - '**/*.json'
      - '*.md'
      - '**/*.md'
      - '*.png'
      - '**/*.png'
      - '*.sample'
      - '**/*.sample'
      - '*.TAG'
      - '**/*.TAG'
      - '*.yaml'
      - '**/*.yaml'
      - '*.yml'
      - '**/*.yml'
      - '!/.github/workflows/**'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'changelog/**'

permissions:
  contents: read
  packages: write
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name != 'push' || github.ref != 'refs/heads/main' }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: eval_framework_public
  HF_DATASET_CACHE_DIR: /tmp/huggingface_datasets

jobs:
  # Security check for pull_request_target
  authorize-fork-pr:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check authorization
        id: check
        run: |
          # For push events, always run
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Event is push. Running workflow."
            echo "should_run=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For pull_request events, check if it's from a fork
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # GitHub doesn't always populate fork info for pull_request events
            # So we'll check if the head repo name differs from the base repo name
            if [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.event.pull_request.base.repo.full_name }}" ]]; then
              echo "PR is from the same repository. Running workflow."
              echo "should_run=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "PR is from a fork. Skipping pull_request workflow."
              echo "should_run=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          # For pull_request_target, check if it's from a fork
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            # Check if PR is from a fork
            if [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.event.pull_request.base.repo.full_name }}" ]]; then
              echo "PR is from the same repository. Skipping pull_request_target workflow."
              echo "should_run=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            # If from fork, check for trusted_contributor label
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'trusted_contributor') }}" == "true" ]]; then
              echo "PR is from a fork with 'trusted_contributor' label. Authorized!"
              echo "should_run=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Otherwise, don't run
            echo "PR is from a fork without 'trusted_contributor' label. Skipping."
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 0
          fi

  lint:
    runs-on: ubuntu-latest
    needs: [authorize-fork-pr]
    if: needs.authorize-fork-pr.outputs.should_run == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
        with:
          github-repo-token: ${{ secrets.TOKEN_AA_GITHUB_REPO_READER }}
      - name: Run Pre-Commit
        run: |
          poetry run pre-commit install
          poetry run pre-commit run -a
      - name: Run MyPy
        run: |
          poetry run mypy src tests utils

  hf-datasets-cache:
    runs-on: cpu-runner-8c-32gb-01
    container: derskythe/github-runner-base:ubuntu-noble
    needs: [authorize-fork-pr]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.authorize-fork-pr.outputs.should_run == 'true'
    steps:
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
        with:
          github-repo-token: ${{ secrets.TOKEN_AA_GITHUB_REPO_READER }}
      - name: Huggingface datasets cache
        uses: actions/cache@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}
          key: hf-datasets-${{ github.run_id }}
          restore-keys: |
            hf-datasets-
      - name: Download datasets
        run: |
          export HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }}
          export PATH=$HOME/.local/bin:$PATH
          poetry run python -c "from eval_framework.task_names import make_sure_all_hf_datasets_are_in_cache; make_sure_all_hf_datasets_are_in_cache()"

  build:
    needs: [authorize-fork-pr, lint]
    runs-on: cpu-runner-8c-32gb-01
    container: docker:dind
    if: needs.authorize-fork-pr.outputs.should_run == 'true' && needs.lint.result == 'success'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: eval_framework_public
      REPO_OWNER_LC: aleph-alpha-research
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Registry Authentication
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest

  test-cpu:
    runs-on: cpu-runner-8c-32gb-01
    container: derskythe/github-runner-base:ubuntu-noble
    needs: [authorize-fork-pr, lint, hf-datasets-cache]
    if: |
      always() &&
      needs.authorize-fork-pr.outputs.should_run == 'true' &&
      needs.lint.result == 'success' &&
      (needs.hf-datasets-cache.result == 'success' || needs.hf-datasets-cache.result == 'skipped')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}
          key: hf-datasets-
      - name: Run tests
        run: |
          export HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }}
          export HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }}
          export PATH=$HOME/.local/bin:$PATH
          poetry run pytest --durations=30 -v -m "not gpu and not cpu_slow and not external_api"

  test-cpu-slow:
    runs-on: cpu-runner-8c-32gb-01
    container: derskythe/github-runner-base:ubuntu-noble
    needs: [authorize-fork-pr, lint, hf-datasets-cache]
    if: |
      always() &&
      needs.authorize-fork-pr.outputs.should_run == 'true' &&
      needs.lint.result == 'success' &&
      (needs.hf-datasets-cache.result == 'success' || needs.hf-datasets-cache.result == 'skipped')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry-on-ubuntu
      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}
          key: hf-datasets-
      - name: Run tests
        run: |
          export HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }}
          export HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }}
          export PATH=$HOME/.local/bin:$PATH
          poetry run python -c "import nltk; nltk.download('punkt_tab')"
          poetry run pytest -n auto --max-worker-restart=0 --durations=30 -v -m "not gpu and cpu_slow and not external_api"

  test-gpu:
    needs: [authorize-fork-pr, build, test-cpu, test-cpu-slow]
    runs-on: EvalFrameworkGPURunner
    if: |
      always() &&
      needs.authorize-fork-pr.outputs.should_run == 'true' &&
      needs.test-cpu.result == 'success' &&
      needs.test-cpu-slow.result == 'success' &&
      (needs.build.result == 'success' || (github.event_name != 'push' && needs.build.result == 'skipped'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Normalize repo owner to lowercase
        run: |
          echo "REPO_OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}
          key: hf-datasets-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull container image
        run: |
          docker pull "${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest"

      - name: Run GPU tests inside container with GPU access
        run: |
          timeout 20m docker run --rm --gpus all \
            -v ${{ github.workspace }}:/eval_framework \
            -w /eval_framework \
            -e HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }} \
            -e HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }} \
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest \
            bash -c 'poetry run pytest --durations=30 -v -m "gpu and not cpu_slow and not external_api and not vllm"'

  test-gpu-vllm:
    needs: [authorize-fork-pr, build, test-cpu, test-cpu-slow, test-gpu]
    runs-on: EvalFrameworkGPURunner
    if: |
      always() &&
      needs.authorize-fork-pr.outputs.should_run == 'true' &&
      needs.test-cpu.result == 'success' &&
      needs.test-cpu-slow.result == 'success' &&
      (needs.build.result == 'success' || (github.event_name != 'push' && needs.build.result == 'skipped')) &&
      (needs.test-gpu.result == 'success' || needs.test-gpu.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Normalize repo owner to lowercase
        run: |
          echo "REPO_OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Huggingface datasets cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.HF_DATASET_CACHE_DIR }}
          key: hf-datasets-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull container image
        run: |
          docker pull "${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest"

      - name: Run GPU tests inside container with GPU access
        run: |
          timeout 20m docker run --rm --gpus all \
            -v ${{ github.workspace }}:/eval_framework \
            -w /eval_framework \
            -e HF_TOKEN=${{ secrets.HUGGINGFACE_API_KEY }} \
            -e HF_DATASET_CACHE_DIR=${{ env.HF_DATASET_CACHE_DIR }} \
            -e VLLM_LOGGING_LEVEL=DEBUG \
            -e VLLM_WORKER_MULTIPROC_METHOD=spawn \
            -e VLLM_USE_MODELSCOPE=False \
            -e VLLM_NCCL_SO_PATH="" \
            -e VLLM_USE_TRITON_FLASH_ATTN=0 \
            -e VLLM_DISABLE_CUSTOM_ALL_REDUCE=1 \
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/${{ env.IMAGE_NAME }}:latest \
            bash -c 'curl -sSL https://install.python-poetry.org | python3 - && export PATH="$HOME/.local/bin:$PATH" && poetry --version && poetry run pytest --log-cli-level=INFO -v -m "vllm"'
